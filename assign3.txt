Assign3: Due 11:59PM April 9

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

The Fibonacci series of numbers start with 1, 1, 2, 3, 5, 8, 13, 21, ...
where values at position 0 and 1 are 1, and values at each position after
that are a sum of values at the previous two positions.

Write four implementations of a function to compute the Fibonacci number at a given position.

Please start with one implementation at a time rather than rushing through all
of them at the same time.

The four implementations are described below:

1. An imperative iteration. 
  Given a position n, loop through totaling values until you reach the value for the given position.

2. A functional iteration. 
	  Given a position n, loop through totaling values until you reach the value for the given position. Avoid explicit mutability.

3. A simple recursion.
  Given a position, compute the value at a position using the expression fib(n-1) + fib(n-2).

4. A memoized recursion.
  Given a position, look up to see if the value has been precomputed and if so return that value. Otherwise, use recursion to compute the value.
  
Confirms that the memoized version is faster than the recursive version.

Reuse as much code as possible.

Please bring forward the practices, techniques, and tools you have learned so far. This includes: 
Good code quality
Lightweight design
Minimum code
Automated testing                                                         
Code coverage
Continuous integration

Once you complete coding, please answer the following:

1. What design principles did you use in this assignment? Discuss.

We used many design principles in this assignment 

1) Open Closed Principle(OCP) - This principle focuses on extensibility rather than modification of code. We implemented this principle in our memoized recursion functionality. In order to re-use the fibonacci function from the Recursive class, without any modification to the original code we were able to extended the behavior of simple recursive into our memoization class using polymorphism.

2) Single Responsibility Principle(SRP) - This principle focuses on every module should hold responsibility over single part of the program functionality. We have re-structured the modules and classes that were tightly coupled the application to adhere to this principle. We have 4 class that calculate fibonacci and 4 different ways and each module is responsible for only a single change. We have abstracted the base class to perform common and redundant operation and the derived classes to perform the single expected responsibility

3) Don't Repeat Yourself(DRY) - This principle states that every piece of knowledge must have a single, unambiguous, authoritative representation within a system. This principle was implemented in our code where we maintain all tests for imperative, functional, recursion and memoized recursion of Fibonacci in a single place instead of writing same set of tests individually. We have also used this principle in our memoized recursion class to remove the effort of recalculating the precomputed values. Another place we implemented the DRY principle was in the end for validating the position. This was a repetitive piece of code across all the derived classes.

4) Dependency Inversion Principle(DIP) - This principle states not to depend on concrete class, instead concrete class should depend on an interface or abstraction to provide extensibility to an application by decoupling dependencies. We used this principle to our test cases, where we made all tests to depend on a single interface instead of a concrete class and switch the reference to different classes at runtime when each individual test classes are invoked. Additionally our code structure also follows this principle where we have an abstract base class and all the other derived classes extend the behavior of the base class.

5) Liskov's Substitution Principle (LSP) - The principle defines that objects of a superclass shall be replaceable with objects of its subclasses without breaking the application. We have implemented this in our code where each individual function classes extend the abstract class and override the factory method in order to return the instance of the desired sub class that needs to be executed.

6) Yet aren't gonna need it(YAGNI) yet - We initially violated this principle by directly abstracting the fibonacci function.Soon, we realized that we should not abstract at first. We, then started implementing the imperative and functional methods to calculate fibonacci and later triangulated the interface.   


2. Any surprises or things that you did not expect?

We were really surprised in the last part when we started to implement the memoized recursion. We were not able to achieve the desired results because we weren't implementing the OCP principle correctly at first. It took us multiple feedbacks to get the memoized part working correctly. We faced a similar situation when  we tried to implement the DRY principle to ensure there was no duplication. The part to check for a valid position and throw a Runtime exception otherwise was duplicated in each derived class. We had a hard time removing this duplicated piece of code and add to the base. We tried to structure and re-structure again and again. Finally, with the constant feedbacks and few hints from the professor, we were able to achieve the expected behavior. Nevertheless, the time we spent working on this assignment has been a great learning experience for us in architecting the application.

Total [100]: 100
All tests pass [10]:
Test coverage [10]:
Test quality [10]:
Design quality, good separation of concerns [20]:
Code quality [10]:
Test for performance comparison [10]:
Memoized Reuses Recursive Well [10]:
Response to question 1 [10]:
Response to question 2 [10]:
